{
    "code": "// Frontend (React/TypeScript)\n\n// ErrorBoundary.tsx\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // You can also log the error to an error reporting service\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n\n// Usage in App.tsx or other top-level component\n// <ErrorBoundary>\n//   <YourComponent />\n// </ErrorBoundary>\n\n// Backend (Node.js/Express)\n\n// errorMiddleware.ts\nimport { Request, Response, NextFunction } from 'express';\n\nexport function errorMiddleware(error: Error, req: Request, res: Response, next: NextFunction) {\n  console.error(error.stack);\n  res.status(500).send({ error: 'Internal Server Error' });\n}\n\n// Usage in server.ts or app.ts\n// import { errorMiddleware } from './path/to/errorMiddleware';\n// app.use(errorMiddleware);\n",
    "summary": "Implemented error handling in both the frontend and backend. In the frontend, an ErrorBoundary component was created to catch JavaScript errors anywhere in the child component tree and display a fallback UI. In the backend, an error middleware was added to the Express application to handle any uncaught errors by logging them and sending a generic 'Internal Server Error' message to the client.",
    "checklist": [
        "Create an ErrorBoundary component for the frontend",
        "Use ErrorBoundary to wrap top-level components",
        "Implement error middleware for the backend",
        "Use error middleware in the Express app"
    ]
}